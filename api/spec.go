// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.8.2 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xWTW/kRBD9K62Co7HN7iKtfCKL9hCxEJQcV1HUsWs8nbg/6CoPDKP576jc9nyaBAZx",
	"QNpby11V/fq9V9XeQO1t8A4dE1QboHqJVg/Lq2BukYIsQ/QBIxscNiwS6RZlyeuAUAFxNK6FbQbEmnua",
	"2dpmEPHX3kRsoPo8xWW7YvfZlOEfn7BmKfahr5+RzwE8Dt8fnLbzIOqImo13D41mfB3LYbnT5DlYN2l1",
	"BgsfWLezgJ5xPfu908QP1jdmYQTKHJ/mj8MbGMfYYhyucIJLPhm38BJde8c6QUSrTScl+ye9fu6tjnmD",
	"q+9b+ZzX3kIGiUe4kwj1o4Sou95qBxn0UXKXzIGqotjXINnPW8PL/jE3XpA2SHU0QaiDCq5U3Rl0rK5+",
	"uVYLH9VPxl3fKMK4wii6s+FOTrXGGf+NDgYykK2UXuZl/q1U9QGdbFbwNi/zN5BB0Lwc6C6SbsO6TTYR",
	"NQbxrhuo4JMh/jDGiOIUvKMk1ZuynHhCN6TqEDpTD8nFEwmIqRlkZRjtkPh1xAVU8FWxb5ti7JlitOte",
	"Gh2jXidljtm56+saiRZ9161VRO6jI6VVZ4iVX6gRtDJO6SPipPZ3/xD6S4inFp+BeO0Yo9OduhtOVh9j",
	"9Ml31Fur4xoquD1D/rijm3VL0lzpLupmUgbupcakXbER820FZ4Mdpm49VvEWrV/hyK3IH7VFFhNVnzcn",
	"oH/WFgUGL3GEAtIUUA2u2Vt9bPX9EODYY3ZA2unAuP+X/rlQhCOfJIIapZ3C3w2xce10yW0G78q3icVj",
	"EVe6M42SiyKNce/O40aRnGe18L1rDnx2iStEMJrD+aItsr/u4jRx6X8r/98aHze7B+ai8TG1YHoPxuFx",
	"6I//XvfTaTAH5RULBE8zHvhB3uQvM2Cthp8TmQHK4W8XdP/F4iYF6Pjgl6e85I/P/blKn3ytO8VIPD1t",
	"089GJztLT1y9L9+XILSPp5zW+Oia4I1jUuzVUrumQ7XzDSnvDp6jUfQznNv77Z8BAAD//9f50koDCwAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}

